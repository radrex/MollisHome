@model ProductIM

@{
  if (TempData.ContainsKey("ActionMessage"))
  {
    string message = TempData["ActionMessage"].ToString();
    if (message.Contains("❌"))
    {
      <div class="alert alert-danger" role="alert">
        <strong>@TempData["ActionMessage"]</strong>
      </div>
    }
    else
    {
      <div class="alert alert-success" role="alert">
        <strong>@TempData["ActionMessage"]</strong>
      </div>
    }
  }
}

<form method="post" asp-area="Dashboard" asp-controller="Products" asp-action="Create">
  <fieldset class="border p-3">
    <legend class="w-auto">Добави нов продукт</legend>

    <div class="row">
      <div class="col">
        <p class="form-group">
          <label asp-for="Name"></label>
          <input asp-for="Name" type="text" class="form-control" />
          <span asp-validation-for="Name" class="text-danger"></span>
        </p>
        <p class="form-group">
          <label asp-for="Description"></label>
          <textarea asp-for="Description" class="form-control"></textarea>
          <span asp-validation-for="Description" class="text-danger"></span>
        </p>
        <p class="form-group">
          <label asp-for="ImgUrl"></label>
          <input asp-for="ImgUrl" type="text" class="form-control" />
          <span asp-validation-for="ImgUrl" class="text-danger"></span>
        </p>
      </div>

      <div class="col">
        <label asp-for="CategoryId"></label>
        <select asp-for="CategoryId" class="form-select form-control" aria-label="Default select example">
          @{
            <option selected value="@null">Без категория</option>
            List<CategoryVM> categories = Model.Categories.ToList();
            for (int i = 0; i < categories.Count(); i++)
            {
              <option value="@Model.CategoryIds[i]">@categories[i].Name</option>
            }
          }
        </select>

        <br /><label asp-for="MaterialIds"></label>
        <select asp-for="MaterialIds" size="5" class="form-select form-control" multiple aria-label="multiple select example" title="Няма нищо избрано">
          @{
            List<MaterialVM> materials = Model.Materials.ToList();
            for (int i = 0; i < materials.Count(); i++)
            {
              <option value="@Model.MaterialIds[i]">@materials[i].Name - @materials[i].Percentage%</option>
            }
          }
        </select>
      </div>
    </div>
  </fieldset>

  <fieldset class="border p-3">
    <legend class="w-auto">Добави нов вариант на продукта</legend>

    <div id="product-variants" class="row">
      <!-- Modal form buttons for creating Color, Type, Size -->
      <div class="col-12 mb-4 text-center" role="group" aria-label="Basic mixed styles example">
        <partial name="../Colors/_AllModal.cshtml" model="@Model.Colors" />
        <partial name="../Genders/_AllModal.cshtml" model="@Model.Genders" />
        <partial name="../Sizes/_AllModal.cshtml" model="@Model.Sizes" />
      </div>

      <!-- Render _CreateVariant Partial on button click here -->
      <div class="col-3 align-self-center text-center mb-4">
        <button id="create-variant-btn" class="btn btn-warning">➕ Нов Вариант</button>
      </div>

    </div>
  </fieldset>

  <button type="submit" class="btn btn-success">Добави</button>
  <a class="btn btn-info" asp-area="Dashboard" asp-controller="Products" asp-action="All">Върни се обратно</a>

</form>

@section Scripts {
  <partial name="_ValidationScriptsPartial" />

  <script type="text/javascript">
    //TODO: EXTRACT Scripts into organized functions
    document.getElementById('product-variants').addEventListener('click', evt => {
      evt.preventDefault();

      if (evt.target && evt.target.nodeName === 'BUTTON') {
        if (evt.target.id === 'create-variant-btn') {
          fetch('CreateVariant') // Action in the controller
            .then(res => {
              if (!res.ok) {
                return Promise.reject('_CreateVariant Partial not found.');
              }
              return res.text();
            })
            .then(htmlString => {
              const domParser = new DOMParser();
              const col = domParser.parseFromString(htmlString, 'text/html');
              document.getElementById('product-variants').insertBefore(col.body.firstChild, evt.target.parentNode);
            });
        } else if (evt.target.id === 'remove-variant-btn') {
          evt.target.parentNode.remove();
        }
      }
    });
  </script>

  <script type="text/javascript">

    let colorsModal = document.getElementById('colors-modal');
    let tableBody = document.getElementById('colors-table-body');
    let createColorBtn = document.getElementById('create-color-btn');

    const createColorCallback = function (evt) { // Loading input fields for new color creation
      evt.preventDefault();
      fetch('Create')
        .then(res => {
          if (!res.ok) {
            return Promise.reject('_Create PartialView not found.');
          }
          return res.text();
        })
        .then(htmlString => {
          tableBody.innerHTML += htmlString; // Using innerHTML because domParser doesn't parse the partial correctly

          let cancelBtn = document.getElementById('cancel'); // Cancelling add new color operation
          cancelBtn.addEventListener('click', evt => {
            evt.preventDefault();
            tableBody.removeChild(cancelBtn.parentElement.parentElement);
            colorsModal.appendChild(createColorBtn);
          });

          createColorBtn.remove(); // Remove the button for new color (Limiting to only 1 Add operation at a time)
        });
    };

    const callback = function (mutationsList, observer) {
      for (const mutation of mutationsList) {
        if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
          const modalStyle = mutation.target.attributes.style.value;
          if (modalStyle.includes("display: block")) { // OPENED MODAL
            history.pushState({}, '', `${window.location.origin}/Dashboard/Colors/Create`);

            createColorBtn.removeEventListener('click', createColorCallback);
            createColorBtn.addEventListener('click', createColorCallback); // Attach event listener

          } else if (modalStyle.includes("display: none")) { // CLOSED MODAL
            history.replaceState({}, '', `${window.location.origin}/Dashboard/Products/Create`);
            // or window.location.replace(url); to refresh the page so i can get the new values from the db ?

            let cancelBtn = document.getElementById('cancel');
            if (cancelBtn !== null) {
              tableBody.removeChild(document.getElementById('cancel').parentElement.parentElement);
              createColorBtn = document.createElement('button');
              createColorBtn.id = 'create-color-btn';
              createColorBtn.type = 'button';
              createColorBtn.classList.add('btn', 'btn-warning');
              createColorBtn.textContent = "➕ Нов цвят";
              colorsModal.appendChild(createColorBtn);
            }
          }
        }
      }
    };

    const targetNode = document.getElementById('colors');
    const config = { attributes: true, childList: false, subtree: false };
    const observer = new MutationObserver(callback);
    observer.observe(targetNode, config);
      //observer.disconnect();
  </script>
}